from tkinter import *
import math
import parser
import tkinter.messagebox

#====================================Window=====================================================================================

root=Tk()                                                    #creating window
root.title("Scientific Calculator")                          #title of page
root.configure(background="gray")                           #background colour
root.resizable(width=False,height=False)                     #size cannot be changed
root.geometry("480x560+0+0")                                 #geometry of window

#====================================Frame======================================================================================

calc=Frame(root)                                             #new frame inside main window
calc.grid()

class Calc():
    def __init__(s):
        s.total=0
        s.current=""
        s.input_value=True
        s.check_sum=False
        s.op=""
        s.result=False
        
    def numberEnter(s,num):
        s.result=False
        firstnum=txtDisplay.get()
        secondnum=str(num)
        if s.input_value:
            s.current=secondnum
            s.input_value=False
        else:
            if secondnum=='.':
                if secondnum in firstnum:
                    return
            s.current=firstnum+secondnum
        s.display(s.current)
        
    def sum_of_total(s):
        s.result=True
        s.current=float(s.current)
        if s.check_sum==True:
            s.valid_function()
        else:
            s.total=float(txtDisplay.get())
            
    def display(s,value):
        txtDisplay.delete(0,END)
        txtDisplay.insert(0,value)
        
    def operation(s,op):
        s.current=float(s.current)
        if s.check_sum:
            s.valid_function()
        elif not s.result:
            s.total=s.current
            s.input_value=True
        s.check_sum=True
        s.op=op
        s.result=False
        
    def valid_function(s):
        if s.op=="add":
            s.total+=s.current
        if s.op=="sub":
            s.total-=s.current
        if s.op=="mul":
            s.total*=s.current
        if s.op=="div":
            s.total/=s.current
        if s.op=="mod":
            s.total%=s.current
        s.input_value=True
        s.check_sum=False
        s.display(s.total)
        
    def clear(s):
        s.result=False
        s.current="0"
        s.display(0)
        s.input_value=True
    
    def clear_all(s):
        s.clear()
        s.total=0
    
    def sign(s):
        s.result=False
        s.current=-(float(txtDisplay.get()))
        s.display(s.current)
    
    def pi(s):
        s.result=False
        s.current=math.pi*(float(txtDisplay.get())) or math.pi
        s.display(s.current)
        
    def sin(s):
        s.result=False
        s.current=math.sin(math.radians(float(txtDisplay.get())))
        s.display(s.current)
            
    def cos(s):
        s.result=False
        s.current=math.cos(math.radians(float(txtDisplay.get())))
        s.display(s.current)
        
    def tan(s):
        s.result=False
        s.current=math.tan(math.radians(float(txtDisplay.get())))
        s.display(s.current)
    
    def e(s):
        s.result=False
        s.current=math.e*(float(txtDisplay.get())) or math.e 
        s.display(s.current)
    
    def sinh(s):
        s.result=False
        s.current=math.sinh(math.radians(float(txtDisplay.get())))
        s.display(s.current)
    
    def cosh(s):
        s.result=False
        s.current=math.cosh(math.radians(float(txtDisplay.get())))
        s.display(s.current)
    
    def tanh(s):
        s.result=False
        s.current=math.tanh(math.radians(float(txtDisplay.get())))
        s.display(s.current)
    
    def two(s):
        s.result=False
        s.current=math.pow(2,float(txtDisplay.get()))
        s.display(s.current)
        
    def power(s):
        s.result=False
        s.current=math.pow(float(txtDisplay.get()),float(txtDisplay1.get()))
        s.display(s.current)
    
    def modx(s): 
        s.result=False
        if float(txtDisplay.get())<0:
                 s.current=-(float(txtDisplay.get()))
        else:
                 s.current=float(txtDisplay.get())
        s.display(s.current)
    
    def sqr(s):
        s.result=False
        s.current=math.pow(float(txtDisplay.get()),2)
        s.display(s.current)
        
    def cube(s):
        s.result=False
        s.current=math.pow(float(txtDisplay.get()),3)
        s.display(s.current)
        
    def squareroot(s):
        s.result=False
        s.current=math.sqrt(float(txtDisplay.get()))
        s.display(s.current)
        
    def cuberoot(s):
        s.result=False
        s.current=math.pow(float(txtDisplay.get()),1/3)
        s.display(s.current)
        
    def ln(s):
        s.result=False
        s.current=math.log(float(txtDisplay.get()),2)
        s.display(s.current)
        
    def log(s):
        s.result=False
        s.current=math.log(float(txtDisplay.get()),10)
        s.display(s.current)
        
    def inverse(s):
        s.result=False
        s.current=1/float(txtDisplay.get())
        s.display(s.current)
        
    def fact(s):
        s.result=False
        s.current=math.factorial(float(txtDisplay.get()))
        s.display(s.current)
        
    def per(s):
        s.result=False
        s.current=float(txtDisplay.get())/100
        s.display(s.current)
        
    def tenpower(s):
        s.result=False
        s.current=math.pow(10,float(txtDisplay.get()))
        s.display(s.current)
        
    def atan(s):
        s.result=False
        s.current=math.atan(float(txtDisplay.get()))
        s.display(s.current)
    
    def epower(s):
        s.result=False
        s.current=math.pow(math.e,float(txtDisplay.get()))
        s.display(s.current)
    
        
added_value=Calc()

txtDisplay=Entry(calc,font=('arial',20,'bold'), bd=30,bg="gray",width=29,justify=RIGHT)
txtDisplay.grid(row=0,column=0, columnspan=4,pady=1)
txtDisplay.insert(0,"0")

#===================================NumberPad===================================================================================

numberpad="789456123"
i=0
btn=[]
for j in range(2,5):
    for k in range(3):
        btn.append(Button(calc,width=6,height=2,font=('arial',20,'bold'),bd=4,text=numberpad[i]))
        btn[i].grid(row=j,column=k,pady=1)
        btn[i]["command"]=lambda x=numberpad[i]:added_value.numberEnter(x)
        i+=1
    
#==================================Buttons(simple calc)=========================================================================
        
btnclr=Button(calc,text="C",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=added_value.clear).grid(row=1,column=0,pady=1)

btnsqrt=Button(calc,text="v",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=added_value.squareroot).grid(row=1,column=1,pady=1)

btnmod=Button(calc,text="%",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=lambda:added_value.operation("mod")).grid(row=1,column=2,pady=1)

btndiv=Button(calc,text="÷",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=lambda:added_value.operation("div")).grid(row=1,column=3,pady=1)

btnmul=Button(calc,text="x",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=lambda:added_value.operation("mul")).grid(row=2,column=3,pady=1)

btnsub=Button(calc,text="-",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=lambda:added_value.operation("sub")).grid(row=3,column=3,pady=1)

btnadd=Button(calc,text="+",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=lambda:added_value.operation("add")).grid(row=4,column=3,pady=1)

btnsign=Button(calc,text="±",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=added_value.sign).grid(row=5,column=0,pady=1)

btnzero=Button(calc,text="0",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=lambda:added_value.numberEnter(0)).grid(row=5,column=1,pady=1)

btndec=Button(calc,text=".",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=lambda:added_value.numberEnter(".")).grid(row=5,column=2,pady=1)

btnsequal=Button(calc,text="=",width=6,height=2,font=('arial',20,'bold'),bd=4,
                 bg="gray",command=added_value.sum_of_total).grid(row=5,column=3,pady=1)


#====================================Buttons(Scientific calc)===================================================================

btnpi=Button(calc,text="p",width=6,height=2,font=('arial',20,'bold'),bd=4,
             bg="gray",command=added_value.pi).grid(row=1,column=4,pady=1)

btnsin=Button(calc,text="Sin",width=6,height=2,font=('arial',20,'bold'),bd=4
              ,bg="gray",command=added_value.sin).grid(row=1,column=5,pady=1)

btncos=Button(calc,text="Cos",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=added_value.cos).grid(row=1,column=6,pady=1)

btntan=Button(calc,text="Tan",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=added_value.tan).grid(row=1,column=7,pady=1)

btne=Button(calc,text="e",width=6,height=2,font=('arial',20,'bold'),bd=4,
            bg="gray",command=added_value.e).grid(row=2,column=4,pady=1)

btnsinh=Button(calc,text="Sinh",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=added_value.sinh).grid(row=2,column=5,pady=1)

btncosh=Button(calc,text="Cosh",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=added_value.cosh).grid(row=2,column=6,pady=1)

btntanh=Button(calc,text="Tanh",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=added_value.tanh).grid(row=2,column=7,pady=1)


btncube=Button(calc,text="Cube",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=added_value.cube).grid(row=3,column=4,pady=1)


btnper=Button(calc,text="%age",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=added_value.per).grid(row=3,column=5,pady=1)

bttenpower=Button(calc,text="10^x",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=added_value.tenpower).grid(row=3,column=6,pady=1)

btnepower=Button(calc,text="e^x",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=added_value.epower).grid(row=3,column=7,pady=1)

btnsq=Button(calc,text="Sqr",width=6,height=2,font=('arial',20,'bold'),bd=4,
           bg="gray",command=added_value.sqr).grid(row=4,column=4,pady=1)

btntwo=Button(calc,text="2^x",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=added_value.two).grid(row=4,column=5,pady=1)

btnmodx=Button(calc,text="|x|",width=6,height=2,font=('arial',20,'bold'),bd=4,
               bg="gray",command=added_value.modx).grid(row=4,column=6,pady=1)

btncuberoot=Button(calc,text="3v",width=6,height=2,font=('arial',20,'bold'),bd=4,
                   bg="gray",command=added_value.cuberoot).grid(row=4,column=7,pady=1)

btnln=Button(calc,text="ln",width=6,height=2,font=('arial',20,'bold'),bd=4,
            bg="gray",command=added_value.ln).grid(row=5,column=4,pady=1)

btnlog=Button(calc,text="log",width=6,height=2,font=('arial',20,'bold'),bd=4,
              bg="gray",command=added_value.log).grid(row=5,column=5,pady=1)

btninverse=Button(calc,text="1/x",width=6,height=2,font=('arial',20,'bold'),bd=4,
                  bg="gray",command=added_value.inverse).grid(row=5,column=6,pady=1)

btnfactorial=Button(calc,text="x!",width=6,height=2,font=('arial',20,'bold'),bd=4,
                    bg="gray",command=added_value.fact).grid(row=5,column=7,pady=1)


lblDisplay=Label(calc,text="Scientific Calculator",font=('arial',25,'bold'),justify=CENTER)
lblDisplay.grid(row=0,column=4,columnspan=4)



#====================================Menu=======================================================================================

def exit():
    exit=tkinter.messagebox.askyesno("Scintific Calculator","Confirm if you want to exit")
    if exit>0:
        root.destroy()
        return
def standard():
    root.resizable(width=False,height=False)
    root.geometry("480x560+0+0")
    
def scientific():
    root.resizable(width=False,height=False)
    root.geometry("960x560+0+0")
    
    
menubar=Menu(calc)                                           #creating a menubar inside frame calc

filemenu=Menu(menubar,tearoff=0)                             #creating another menu called filemenu inside menuba
menubar.add_cascade(label="File",menu=filemenu)              #adding items in main menu(menubar)
filemenu.add_command(label="Standard", command=standard)                       #adding items inside main menu(filemenu)
filemenu.add_command(label="Scintific", command=scientific)
filemenu.add_separator()                                     #adding a line
filemenu.add_command(label="Exit",command=exit)

editmenu=Menu(menubar,tearoff=0)                             
menubar.add_cascade(label="Edit",menu=editmenu)              
editmenu.add_command(label="Cut")                       
editmenu.add_command(label="Copy")
editmenu.add_separator()                                     
editmenu.add_command(label="Paste")

helpmenu=Menu(menubar,tearoff=0)                             
menubar.add_cascade(label="Help",menu=helpmenu)              
helpmenu.add_command(label="View Help")
helpmenu.add_separator()                                     
helpmenu.add_command(label="About Calculator")




root.configure(menu=menubar)
root.mainloop()
